// Generated by CoffeeScript 1.6.3
var abTest, abTestWrite, initDots, readCookie, setCookie, variant;

readCookie = function(name) {
  var c, ca, i, nameEQ;
  nameEQ = escape(name) + "=";
  ca = document.cookie.split(";");
  i = 0;
  while (i < ca.length) {
    c = ca[i];
    while (c.charAt(0) === " ") {
      c = c.substring(1, c.length);
    }
    if (c.indexOf(nameEQ) === 0) {
      return unescape(c.substring(nameEQ.length, c.length).replace(/"/g, ''));
    }
    i++;
  }
};

setCookie = function(cookieName, cookieValue, expire) {
  if (expire == null) {
    expire = null;
  }
  if (!expire) {
    expire = new Date();
    expire.setDate(expire.getDate() + 365 * 30);
  }
  return document.cookie = escape(cookieName) + "=" + escape(cookieValue) + ";expires=" + expire.toGMTString() + ";domain=." + location.hostname + ";path=/";
};

variant = false;

abTest = function(usableVariants, fallbackVariant) {
  var maxI, minI;
  maxI = usableVariants.length - 1;
  minI = -1;
  variant = readCookie('ab_testing_variant');
  if ((!!variant) || (variant === '0') || (variant === '-1')) {
    variant = parseInt(variant, 10);
    if (variant < 0) {
      window.ab_variant = fallbackVariant;
      return;
    }
    if (variant > maxI) {
      variant = false;
    }
  } else {
    variant = false;
  }
  if (variant === false) {
    variant = Math.floor(Math.random() * (maxI - minI + 1) + minI);
    setCookie('ab_testing_variant', variant, new Date(1 * new Date() + 3600 * 1000));
  }
  if (variant > -1) {
    window.ab_variant = usableVariants[variant][0];
    return usableVariants[variant];
  }
};

abTestWrite = function(klass, usableVariants, fallbackVariant) {
  var chosenVariant, s;
  chosenVariant = abTest(usableVariants, fallbackVariant);
  if (!chosenVariant) {
    return;
  }
  s = "" + (unescape('%3Cspan')) + " class=\"" + klass + "\"" + (unescape("%3E"));
  s += chosenVariant[1];
  s += unescape("%3C/span%3E");
  return document.write(s);
};

initDots = function() {
  var $els;
  $els = [].slice.call(document.querySelectorAll('.anim__item'), 0);
  return $els.forEach(function(dot, ind) {
    var frg, i, s;
    i = parseInt(dot.getAttribute('data-dots'), 10);
    frg = document.createElement('span');
    frg.setAttribute('class', "anim__dots__all anim__len__" + i + " anim__delay__" + ind);
    dot.style.width = frg.style.width = i * 11 + 'px';
    s = '';
    while (i) {
      s += '<span class="anim--dot"></span>';
      i--;
    }
    frg.innerHTML = s;
    return dot.insertBefore(frg, dot.lastChild);
  });
};
